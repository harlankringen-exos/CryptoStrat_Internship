//
// Copyright (c) 2016-2019 Vinnie Falco (vinnie dot falco at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// Official repository: https://github.com/boostorg/beast
//

//------------------------------------------------------------------------------
//
// Example: WebSocket SSL client, asynchronous
//
//------------------------------------------------------------------------------

#include "ore.hpp"
#include "root_certificates.hpp"

#include <boost/asio/strand.hpp>
#include <boost/beast/core.hpp>
#include <boost/beast/ssl.hpp>
#include <boost/beast/websocket.hpp>
#include <boost/beast/websocket/ssl.hpp>
#include <cstdlib>
#include <functional>
#include <iostream>
#include <memory>
#include <string>

namespace beast = boost::beast;          // from <boost/beast.hpp>
namespace http = beast::http;            // from <boost/beast/http.hpp>
namespace websocket = beast::websocket;  // from <boost/beast/websocket.hpp>
namespace net = boost::asio;             // from <boost/asio.hpp>
namespace ssl = boost::asio::ssl;        // from <boost/asio/ssl.hpp>
using tcp = boost::asio::ip::tcp;        // from <boost/asio/ip/tcp.hpp>

#include "nlohmann/json.hpp"

// for convenience
using json = nlohmann::json;

//------------------------------------------------------------------------------

// Report a failure
void fail(beast::error_code ec, char const* what) {
  std::cerr << what << ": " << ec.message() << "\n";
}

// Sends a WebSocket message and prints the response
class session : public std::enable_shared_from_this<session> {
  tcp::resolver resolver_;
  websocket::stream<beast::ssl_stream<beast::tcp_stream>> ws_;
  beast::flat_buffer buffer_;
  std::string host_;
  std::string text_;
  int ctr = 0;

 public:
  // Resolver and socket require an io_context
  explicit session(net::io_context& ioc, ssl::context& ctx)
      : resolver_(net::make_strand(ioc)), ws_(net::make_strand(ioc), ctx) {}

  // Start the asynchronous operation
  void run(char const* host, char const* port, char const* text) {
    // Save these for later
    host_ = host;
    text_ = text;

    if (!SSL_set_tlsext_host_name(ws_.next_layer().native_handle(),
                                  "ws-feed.prime.coinbase.com")) {
      boost::system::error_code ec{static_cast<int>(::ERR_get_error()),
                                   boost::asio::error::get_ssl_category()};
      throw boost::system::system_error{ec};
    }

    // Look up the domain name
    resolver_.async_resolve(
        host, port,
        beast::bind_front_handler(&session::on_resolve, shared_from_this()));
  }

  void on_resolve(beast::error_code ec, tcp::resolver::results_type results) {
    if (ec) return fail(ec, "resolve");

    // Set a timeout on the operation
    beast::get_lowest_layer(ws_).expires_after(std::chrono::seconds(30));

    // Make the connection on the IP address we get from a lookup
    beast::get_lowest_layer(ws_).async_connect(
        results,
        beast::bind_front_handler(&session::on_connect, shared_from_this()));
  }

  void on_connect(beast::error_code ec,
                  tcp::resolver::results_type::endpoint_type ep) {
    if (ec) return fail(ec, "connect");

    // Update the host_ string. This will provide the value of the
    // Host HTTP header during the WebSocket handshake.
    // See https://tools.ietf.org/html/rfc7230#section-5.4
    host_ += ':' + std::to_string(ep.port());

    // Set a timeout on the operation
    beast::get_lowest_layer(ws_).expires_after(std::chrono::seconds(30));

    // Perform the SSL handshake
    ws_.next_layer().async_handshake(
        ssl::stream_base::client,
        beast::bind_front_handler(&session::on_ssl_handshake,
                                  shared_from_this()));
  }

  void on_ssl_handshake(beast::error_code ec) {
    if (ec) return fail(ec, "ssl_handshake");

    // Turn off the timeout on the tcp_stream, because
    // the websocket stream has its own timeout system.
    beast::get_lowest_layer(ws_).expires_never();

    // Set suggested timeout settings for the websocket
    ws_.set_option(
        websocket::stream_base::timeout::suggested(beast::role_type::client));

    // Set a decorator to change the User-Agent of the handshake
    ws_.set_option(
        websocket::stream_base::decorator([](websocket::request_type& req) {
          req.set(http::field::user_agent,
                  std::string(BOOST_BEAST_VERSION_STRING) +
                      " websocket-client-async-ssl");
        }));

    // Perform the websocket handshake
    ws_.async_handshake(
        "ws-feed.prime.coinbase.com:443", "/",
        beast::bind_front_handler(&session::on_handshake, shared_from_this()));
  }

  void on_handshake(beast::error_code ec) {
    if (ec) return fail(ec, "handshake");

    json j2 = {
        {"type", "subscribe"},
        {"product_ids", {"ETH-USD", "ETH-EUR"}},
        {"channels",
         {"heartbeat",
          {{"name", "ticker"}, {"product_ids", {"ETH-BTC", "ETH-USD"}}}}}};
    std::string s = j2.dump();

    // Send the message
    ws_.async_write(
        net::buffer(std::string(s)),
        beast::bind_front_handler(&session::on_write, shared_from_this()));
  }

  void on_write(beast::error_code ec, std::size_t bytes_transferred) {
    boost::ignore_unused(bytes_transferred);

    if (ec) return fail(ec, "write");

    // Read a message into our buffer
    ws_.async_read(buffer_, beast::bind_front_handler(&session::on_read,
                                                      shared_from_this()));
  }

  void on_read(beast::error_code ec, std::size_t bytes_transferred) {
    uint64_t ts =
        std::chrono::duration_cast<std::chrono::nanoseconds>(
            std::chrono::high_resolution_clock::now().time_since_epoch())
            .count();
    boost::ignore_unused(bytes_transferred);
    ++ctr;
    std::cout << ctr << std::endl;
    if (ec) return fail(ec, "read");

    if (ctr == 10000) {
      // Close the WebSocket connection
      ws_.async_close(
          websocket::close_code::normal,
          beast::bind_front_handler(&session::on_close, shared_from_this()));
    }

    // The make_printable() function helps print a ConstBufferSequence
    // unfortunately makes a copy internally as opposed to some stringview;
    // unsure how fast nlohmann parser is; don't know byte offsets of spec so we
    // have to parse
    json j = json::parse(beast::buffers_to_string(buffer_.data()));
    std::string type = j["type"];

    if (type == "update") {
      // level set ("updates")
      LevelSet ore_msg(14, ts, 0, 0, 0, 0, j["changes"][0][1],
                       j["changes"][0][2], j["changes"][0][0] == "buy");
      std::array<LevelSet, 1> arr = {ore_msg};
      msgpack::sbuffer sbuf;
      msgpack::pack(sbuf, arr);
    }
    if (type == "match") {
      // off-book trade (matches)
      Match ore_msg(11, ts, 0, 0, 0, 0, j["price"], j["size"], "");
      std::array<Match, 1> arr = {ore_msg};
      msgpack::sbuffer sbuf;
      msgpack::pack(sbuf, arr);
    }
    if (type == "something") {
      // time (confused about when we send these...some sort of update?)
    }

    // drain buffer
    buffer_.consume(buffer_.size());

    // read another
    ws_.async_read(buffer_, beast::bind_front_handler(&session::on_read,
                                                      shared_from_this()));
  }

  void on_close(beast::error_code ec) {
    if (ec) return fail(ec, "close");

    // If we get here then the connection is closed gracefully
  }
};

//------------------------------------------------------------------------------

int main(int argc, char** argv) {
  // Check command line arguments.
  if (argc != 4) {
    std::cerr << "Usage: websocket-client-async-ssl <host> <port> <text>\n"
              << "Example:\n"
              << "    websocket-client-async-ssl echo.websocket.org 443 "
                 "\"Hello, world!\"\n";
    return EXIT_FAILURE;
  }
  auto const host = argv[1];
  auto const port = argv[2];
  auto const text = argv[3];

  // The io_context is required for all I/O
  net::io_context ioc;

  // The SSL context is required, and holds certificates
  ssl::context ctx{ssl::context::tlsv12_client};

  // This holds the root certificate used for verification
  load_root_certificates(ctx);
  ctx.set_verify_mode(ssl::verify_none);

  // Launch the asynchronous operation
  std::make_shared<session>(ioc, ctx)->run(host, port, text);

  // Run the I/O service. The call will return when
  // the socket is closed.
  ioc.run();

  return EXIT_SUCCESS;
}
